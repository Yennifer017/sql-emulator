
package compi1.sqlemulator.parser;

import java_cup.runtime.*;


Parser code {:
    // Connect this parser to a scanner!
    public Parser(Lexer lex) {
	    super(lex);
	}

private Lexer lexer = new Lexer();

public Lexer getLexer() {
    return lexer;
}

public void syntax_error(Symbol cur_token) {
            System.out.println("Simbolo con error:" + symbl_name_from_id(cur_token.sym));
            System.out.println("Linea " + cur_token.left);
            System.out.println("Columna " + cur_token.right);
            if (expected_token_ids().isEmpty()) {
                System.out.println("ya no se esperaba ningun simbolo");
            }
        }
/*
public void unrecovered_syntax_error(Symbol cur_token) {
            System.out.println("Error irrecuperable sobrecargado");
        }*/
:}

/* Terminals (tokens returned by the scanner). */
terminal        SELECCIONAR, FILTRAR, INSERTAR, ACTUALIZAR, ASIGNAR, ELIMINAR, EN,
                PUNTO, ASTERISCO, PARENTESIS_L, PARENTESIS_R, FIN_INSTRUCCION, 
                IGUAL, MAYOR_QUE, MENOR_QUE, MAYOR_IGUAL_QUE, MENOR_IGUAL_QUE, DIFERENTE,
                AND, OR, IDENTIFICADOR, VALORES, COMA;
terminal Integer    ENTERO;
terminal Float      DECIMAL;
terminal String     CADENA;

/* Non-terminals */
non terminal    relational_operator, values, value, instruccion, select_stm, insert_stm, update_stm,
                delete_stm, columns, path, filtros_opt, columns_opt, asignations, 
                filtros, conditions, condition, logic, and_stm, or_stm,
                comparable, insertables, more_insertables, more_asignations,
                and_stm2, or_stm2, selects;



/* The grammar */


start with instruccion;

/* no terminales que derivan en terminales*/
relational_operator ::= MAYOR_QUE | IGUAL | MENOR_QUE | MAYOR_IGUAL_QUE | MENOR_IGUAL_QUE | DIFERENTE;
values ::= CADENA | ENTERO | DECIMAL;

instruccion ::= select_stm     
                | insert_stm
                | update_stm
                | delete_stm
                | error                               
                ;

select_stm ::= SELECCIONAR selects EN path filtros_opt FIN_INSTRUCCION;
insert_stm ::= INSERTAR EN path columns_opt VALORES PARENTESIS_L insertables PARENTESIS_R FIN_INSTRUCCION;
update_stm ::= ACTUALIZAR EN path ASIGNAR asignations filtros_opt FIN_INSTRUCCION;
delete_stm ::= ELIMINAR EN path filtros_opt FIN_INSTRUCCION;

selects ::= ASTERISCO 
            | columns ;
columns ::= IDENTIFICADOR (COMA columns)* ;

path ::= IDENTIFICADOR (PUNTO path)*;

filtros_opt ::= filtros 
            | /*empty*/;
filtros ::= FILTRAR conditions;

conditions ::= condition logic;
logic ::= and_stm 
            | or_stm;

and_stm ::= AND condition and_stm2 ;
and_stm2 ::= AND condition and_stm2
            | /*empty*/;

or_stm ::= OR condition or_stm2 ;
or_stm2 ::= OR condition or_stm2
            | /*empty*/;
            
condition ::= IDENTIFICADOR relational_operator comparable;
comparable ::= values 
            | IDENTIFICADOR;

insertables ::= value more_insertables;
more_insertables ::= COMA insertables 
            | /*empty*/;

columns_opt ::= PARENTESIS_L columns PARENTESIS_R 
            | /*empty*/;

asignations ::= IDENTIFICADOR IGUAL value more_asignations;
more_asignations ::= asignations 
            | /*empty*/;
